ext {
    vaadinVersion = '24.2.0'
    vaadinFlowServerVersion = '24.2.0'
    httpClientVersion='5.2.1'
    slf4jVersion = '2.0.9'
}

ext.libraries = [
    gson: 'com.google.code.gson:gson:1.6',
    httpclient: "org.apache.httpcomponents.client5:httpclient5:$httpClientVersion",
    httpcore: "org.apache.httpcomponents.client5:httpcore5:$httpClientVersion",
    servletAPI: "javax.servlet:javax.servlet-api:4.0.1",
    commonsCodec: "commons-codec:commons-codec:1.16.0",
    slf4j: "org.slf4j:slf4j-api:$slf4jVersion",
    slf4jBindingLibrary: "org.slf4j:slf4j-log4j12:$slf4jVersion",
    log4j: "log4j:log4j:2.21.0",
    junit: "junit:junit:4.13.2",
    assertJ   : "org.assertj:assertj-core:3.24.2",
    vaadinCore: [dependencies.create("com.vaadin:vaadin-core") {
//         Webjars are only needed when running in Vaadin 13 compatibility mode
        ["com.vaadin.webjar", "org.webjars.bowergithub.insites",
         "org.webjars.bowergithub.polymer", "org.webjars.bowergithub.polymerelements",
         "org.webjars.bowergithub.vaadin", "org.webjars.bowergithub.webcomponents"]
                .forEach { group -> exclude(group: group) }
    }]
]

subprojects {

    apply plugin: 'java'

    sourceCompatibility = 17
    targetCompatibility = 17

    repositories {
        mavenLocal()
        maven {
            url 'https://maven.vaadin.com/vaadin-addons'
        }
        // This repository contains Atlassian JIRA REST Java Client library used by JIRA connector.
        // Browse artifacts online: https://maven.atlassian.com/content/groups/public/com/atlassian/jira/jira-rest-java-client-core/
        maven {
            url 'https://m2proxy.atlassian.com/repository/public'
        }
        mavenCentral()
    }

    dependencies {
        compile 'com.google.guava:guava:32.1.3-jre'
        testCompile (
                libraries.junit,
                project(":test-utilities")
        )
    }

    // disabled javadoc generation during Gradle build to avoid build failure.
    // see https://github.com/johndevs/gradle-vaadin-plugin/issues/130
    javadoc {
        enabled = false
    }

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    test {
        testLogging {
            exceptionFormat = 'full'
        }
        // exclude integration tests from the regular "test" command.
        // see the custom "itest" command below if you need to run integration tests
        useJUnit {
            excludeCategories 'com.taskadapter.test.core.IntegrationTest'
        }
    }
    // custom "itest" command: integration tests
    task itest(type: Test) {
        useJUnit {
            includeCategories 'com.taskadapter.test.core.IntegrationTest'
        }
    }
    task allDeps(type: DependencyReportTask) {}
}


