package com.taskadapter.webui.results;

import com.taskadapter.web.uiapi.ConfigId;
import com.taskadapter.webui.Storage;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import scala.collection.JavaConverters;
import scala.reflect.Manifest;
import scala.reflect.ManifestFactory$;

import java.io.File;
import java.util.Arrays;
import java.util.Comparator;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

public class ExportResultStorage {
    private static Logger logger = LoggerFactory.getLogger(ExportResultStorage.class);
    private static Manifest<ExportResultFormat> manifest = ManifestFactory$.MODULE$.classType(ExportResultFormat.class);

    private final File dataFolder;
    private final int maxNumberOfResultsToKeep;
    private final Storage storage;

    public ExportResultStorage(File rootDir, int maxNumberOfResultsToKeep) {
        dataFolder = new File(rootDir, "results");
        this.maxNumberOfResultsToKeep = maxNumberOfResultsToKeep;
        storage = new Storage(dataFolder, "results", "json");
    }

    public void store(ExportResultFormat item) {
        ensureMaxNumberResults(maxNumberOfResultsToKeep);
        storage.storeNewItemWithAutogeneratedName(item);
    }

    public Optional<ExportResultFormat> getResult(String resultId) {
        return getSaveResults().stream().filter(r -> r.getResultId().equals(resultId)).findFirst();
    }

    public List<ExportResultFormat> getSaveResults(ConfigId configId) {
        return getSaveResults().stream()
                .filter(r -> r.getConfigId().equals(configId))
                .collect(Collectors.toList());
    }

    public List<ExportResultFormat> getSaveResults() {
        return storage.getItemsJava(ExportResultFormat.class);
    }

    private void ensureMaxNumberResults(int maxNumberOfResultsToKeep) {
        File[] files = dataFolder.listFiles();
        if (files != null && files.length >= maxNumberOfResultsToKeep) {
            List<File> fileList = Arrays.asList(files);
            fileList.sort(Comparator.comparingLong(File::lastModified));
            File oldest = fileList.get(0);
            logger.warn("Deleting old result file " + oldest.getAbsolutePath()
                    + " because max allowed number of results reached: " + maxNumberOfResultsToKeep);
            oldest.delete();
        }
    }
}
