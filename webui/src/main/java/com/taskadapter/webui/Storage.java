package com.taskadapter.webui;

import com.google.common.io.Files;
import com.taskadapter.common.JsonUtil;
import com.taskadapter.connector.common.FileNameGenerator;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.File;
import java.io.FilenameFilter;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

public class Storage {

    private static final Logger logger = LoggerFactory.getLogger(Storage.class);

    private final File storageFolder;
    private final String fileNamePrefix;
    private final String fileNameExtension;

    private final FilenameFilter resultsFileFilter = new FilenameFilter() {
        @Override
        public boolean accept(File dir, String name) {
            return name.startsWith(fileNamePrefix) && name.endsWith(fileNameExtension);
        }
    };

    public Storage(File storageFolder, String fileNamePrefix, String fileNameExtension) {
        this.storageFolder = storageFolder;
        this.fileNamePrefix = fileNamePrefix;
        this.fileNameExtension = fileNameExtension;
    }

    public <T> Optional<T> get(String elementId, Class<T> clazz) {
        var file = getFileById(elementId);
        if (file.exists()) {
            return Optional.of(convertFileToObject(file, clazz));
        }
        return Optional.empty();
    }

    public <T> List<T> getItems(Class<T> clazz) {
        var files = storageFolder
                .listFiles(resultsFileFilter);
        if (files == null) {
            return new ArrayList<>();
        }

        return Arrays.stream(files).map(file -> convertFileToObject(file, clazz))
                .collect(Collectors.toList());
    }

    private static <T> T convertFileToObject(File file, Class<T> clazz) {
        String json;
        try {
            json = Files.toString(file, StandardCharsets.UTF_8);
            return JsonUtil.parseJsonString(json, clazz);
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    public <T> void storeNewItemWithAutogeneratedName(T result) {
        var file = FileNameGenerator.findSafeAvailableFileName(storageFolder,
                fileNamePrefix + "-%d." + fileNameExtension, 10000000);
        store(result, file);
    }

    public <T> void store(T result, String elementId) {
        var file = getFileById(elementId);
        store(result, file);
    }

    private <T> void store(T result, File file) {
        var jsonString = JsonUtil.toJsonString(result);
        storageFolder.mkdirs();
        try {
            Files.write(jsonString, file, StandardCharsets.UTF_8);
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
        logger.debug("Saved {} to {}", result, file.getAbsolutePath());
    }

    public void delete(String elementId) {
        var file = getFileById(elementId);
        if (file.exists()) {
            file.delete();
        }
    }

    private File getFileById(String elementId) {
        var relativeFileName = getRelativeFileName(elementId);
        return new File(storageFolder, relativeFileName);
    }

    private String getRelativeFileName(String elementId) {
        return fileNamePrefix + "-" + elementId + "." + fileNameExtension;
    }
}
